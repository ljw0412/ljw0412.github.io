<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>为什么SQL语句走了索引，执行却很慢？</title>
    <link href="/2025/02/20/%E4%B8%BA%E4%BB%80%E4%B9%88SQL%E8%AF%AD%E5%8F%A5%E8%B5%B0%E4%BA%86%E7%B4%A2%E5%BC%95%EF%BC%8C%E6%89%A7%E8%A1%8C%E5%8D%B4%E5%BE%88%E6%85%A2%EF%BC%9F/"/>
    <url>/2025/02/20/%E4%B8%BA%E4%BB%80%E4%B9%88SQL%E8%AF%AD%E5%8F%A5%E8%B5%B0%E4%BA%86%E7%B4%A2%E5%BC%95%EF%BC%8C%E6%89%A7%E8%A1%8C%E5%8D%B4%E5%BE%88%E6%85%A2%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>我们都知道，业务开发涉及到数据库的SQL操作时，一定要review是否命中索引。否则，会走“全表扫描”，如果表数据量很大时，会慢的要死。</p><p>但假如命中了索引，就一定不会出现慢查询吗？</p><h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><p>MySQL的慢查询日志是MySQL提供的一种日志记录，用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。</p><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>其实，在explain中，我们不仅需要关注type字段，更重要的是看rows字段，它记录的是扫描行数。当一个表很大时，不仅要关注是否有索引，还要关注索引的过滤性是否足够好。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>现在有一张表，记录了中国14亿人的基本信息，有一个索引是姓名和年龄的组合索引。现在需要查出所有姓张，并且年龄是8岁的人的信息，</p><p>方案1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> people <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;张%&#x27;</span> <span class="hljs-keyword">and</span> age<span class="hljs-operator">=</span><span class="hljs-number">8</span>;<br></code></pre></td></tr></table></figure><p>在MySQL5.5和之前的版本中，这个语句的执行流程是这样的:</p><ul><li>首先从联合索引上找到第1个姓张的记录，取出主键id，然后到主键索引树上，根据id取出整行的值；</li><li>判断年龄字段是否等于8，如果是就作为结果集的一行返回，如果不是就丢弃。</li><li>在联合索引上向右遍历，并重复做回表和判断的逻辑，直到碰到联合索引树上名字的第1个字不是张的记录为止。</li></ul><p>假设全国姓张的人有8000万，那么这个过程就要回表8000万次。</p><p>在MySQL5.6版本，引入了<strong>索引下推</strong>的优化。我们来看看这个优化的执行流程：</p><ul><li>首先从联合索引树上，找到第1个姓张的记录，判断这个索引记录里面，年龄的值是不是8，如果是就回表，取出整行数据，作为结果集的一部分返回，如果不是就丢弃；</li><li>在联合索引树上，向右遍历，并判断年龄字段后，根据需要做回表，直到碰到联合索引树上名字的第1个字不是张的记录为止；</li></ul><p>假设全国姓张的人有8000万，其中只有100万个人年龄是8岁，那么这个查询过程中在联合索引里要遍历8000万次，而回表只需要100万次。</p><p>还有一个更方便有效的方法：</p><p>我们可以考虑把姓和年龄来做一个联合索引。这里可以使用MySQL5.7引入的虚拟列来实现。</p><p>首先在表上上创建一个字段叫name_first的虚拟列，然后给name_first和age上创建一个联合索引，并且，让这个虚拟列的值总是等于name字段的前两个字节，虚拟列在插入数据的时候不能指定值，在更新的时候也不能主动修改，它的值会根据定义自动生成，在name字段修改的时候也会自动修改。</p><p>有了这个新的联合索引，我们在找姓张，并且年龄为8的小朋友的时候，这个SQL语句就可以这么写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_people <span class="hljs-keyword">where</span> name_first<span class="hljs-operator">=</span><span class="hljs-string">&#x27;张&#x27;</span> <span class="hljs-keyword">and</span> age<span class="hljs-operator">=</span><span class="hljs-number">8</span>。<br></code></pre></td></tr></table></figure><p>这样这个语句的执行过程，就只需要扫描联合索引的100万行，并回表100万次，这个优化的本质是我们创建了一个更紧凑的索引，来加速了查询的过程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优化sql，并不只是看有没有走索引，而是要减少扫描行数。可能不同的场景下有不同的原因，重点是找出性能瓶颈所在，然后解决它。</p>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么核心线程池满了后，不直接创建新的线程去执行新任务？</title>
    <link href="/2025/02/20/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%BB%A1%E4%BA%86%E5%90%8E%EF%BC%8C%E4%B8%8D%E7%9B%B4%E6%8E%A5%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%8E%BB%E6%89%A7%E8%A1%8C%E6%96%B0%E4%BB%BB%E5%8A%A1%EF%BC%9F/"/>
    <url>/2025/02/20/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%A0%B8%E5%BF%83%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%BB%A1%E4%BA%86%E5%90%8E%EF%BC%8C%E4%B8%8D%E7%9B%B4%E6%8E%A5%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%8E%BB%E6%89%A7%E8%A1%8C%E6%96%B0%E4%BB%BB%E5%8A%A1%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>我们都知道线程池工作流程是先创建核心线程，核心线程满了之后将任务放入阻塞队列，阻塞队列满了之后才会创建非核心线程，直到线程数达到最大线程数了，才去采取相应的拒绝策略处理新来的任务。流程如下图所示：</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>本以为对线程池这块已经没有什么疑问了，直到面试被问到为什么是先放阻塞队列，而不是先创建非核心线程？</p><p>看了些回答，大致原因如下，总结下做个记忆：</p><ol><li>核心线程执行完当前的任务之后，会从工作队列中取任务执行，如果不先放进工作队列的话，会导致核心线程处于空闲状态。</li><li>线程池创建线程需要获取mainlock这个全局锁，会影响并发效率，所以使用阻塞队列把第一步创建核心线程与第三步创建最大线程隔离开来，起一个缓冲的作用。</li><li>非核心线程空闲一段时间会被销毁，这样设计可以减少线程的频繁创建和销毁。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>外部排序实现</title>
    <link href="/2025/02/11/%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/"/>
    <url>/2025/02/11/%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文记录自己实现外部排序所遇到的问题以及所有思考。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>当数据量过大，内存无法一次性容纳所有数据时，我们就需要用到外部排序。既然内存无法容纳全部数据，那必然要涉及到磁盘的读写问题。</p><p>磁盘空间是以“块”为单位进行空间管理的。同样，读和写也是以“块”为单位。数据只有读入内存才能进行修改，修改完还需要写回磁盘。</p><p>第一阶段：部分排序阶段</p><p>根据内存大小，将待排序的文件拆成多个部分，使得<strong>每个部分都是能够存入内存中</strong>。然后选择合适的内排序算法（比如快排），将这部分进行排序，并输出到外存临时文件中。这样得到的每个临时文件都是有序排列的，我们将其称之为一个<strong>顺段</strong>。</p><p>第二阶段：归并阶段</p><p>对前面的多个“顺段”进行合并，以2路归并为例，每次都将两个连续的顺段合并成一个更大的顺段。但因为内存限制，每次可能只能读入两个顺段的部分内容，所以我们需要一部分一部分读入，在内存里将进行排序，并输出到外存里的文件中，不断重复这个过程，直至两个顺段被完整遍历。这样经过多层的归并之后，最终会得到一个完整的顺序文件。</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>上述算法的整体时间开销 &#x3D; 读写外存所需要的时间 + 内部排序所需要的时间 + 内部归并所需要的时间</p><p>其中，读写外存所需要的时间占比非常大！！！我们需要尽可能减少IO次数，IO读写次数为<br>$$<br>log_kn<br>$$<br>n是第一阶段结束后，所形成的顺段个数；k是指第二阶段采用的K路归并。</p><p>通过增大k或者减小n，可以提高排序效率。两者都是以空间换时间。</p><p>但是，增大k会导致归并时每挑选一个关键字需要对比 k-1 次，内部归并所需要的时间又增加了。这个问题可以使用败者树来解决。</p><h2 id="败者树"><a href="#败者树" class="headerlink" title="败者树"></a>败者树</h2><p>有了败者树，选出最小元素，只需要对比关键字 log2k 次。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先生成一些测试数据，我这里生成了50000个随机数，写在磁盘上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateData</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filename);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numIntegers</span> <span class="hljs-operator">=</span> <span class="hljs-number">50000</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 检查文件是否已经存在，如果不存在则创建</span><br>            <span class="hljs-keyword">if</span> (file.createNewFile()) &#123;<br>                <span class="hljs-comment">// 向文件中写入一些内容</span><br>                <span class="hljs-keyword">try</span> (<span class="hljs-type">FileWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file)) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numIntegers; i++) &#123;<br>                        <span class="hljs-comment">// 生成 0 到 99999 之间的随机整数</span><br>                        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">100000</span>);<br>                        writer.write(randomNumber + <span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;文件已存在: &quot;</span> + file.getAbsolutePath());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;创建文件时出现错误: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>由前面的介绍可知，此算法一共有两步。</p><p><strong>Step 1：</strong></p><p>**Step 2：**k路归并文件，首先获取到每个输入文件的首个值，用这些数据去初始化败者树，然后开始归并，结果写入磁盘。</p><p>代码太长不贴了，这里要注意：</p><ol><li>在使用完之后关闭输入流和输出流，防止资源泄露，一个潜在的安全问题；</li><li>在合并完成后删除那些不再需要文件，减少不必要的文件对磁盘容量的占用。这里删的是我们程序中间生成的临时文件，不是原本的数据文件，最后程序运行完之后，磁盘上应该只留下原本的数据文件和我们排序完之后的文件，严谨！</li></ol><p>败者树的结构体这里放一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoserTree</span> &#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-type">int</span>[] losers;<br>    <span class="hljs-type">int</span>[] keys;<br><br>    <span class="hljs-comment">// 初始化 K 路败者树</span><br>    LoserTree(<span class="hljs-type">int</span> K) &#123;<br>        k = K;<br>        losers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            losers[i] = -<span class="hljs-number">1</span>;<br>        &#125;<br>        keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            keys[i] = Integer.MAX_VALUE;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(Integer[] initialKeys)</span> &#123;<br>        <span class="hljs-comment">// 设置初始键值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            keys[i] = initialKeys[i];<br>        &#125;<br><br>        <span class="hljs-comment">// 构建初始的败者树</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            adjust(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前的胜者索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">winner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> losers[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 更新败者树中指定索引的值</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> newKey)</span> &#123;<br>        keys[index] = newKey;<br>        adjust(index);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取指定索引的键值</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getKey</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> keys[index];<br>    &#125;<br><br>    <span class="hljs-comment">// 调整败者树，将指定索引 s 的元素插入到正确的位置</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjust</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (s + k) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> s;<br>        <span class="hljs-keyword">while</span> (parent &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp != -<span class="hljs-number">1</span> &amp;&amp; (losers[parent] == -<span class="hljs-number">1</span> || keys[temp] &gt; keys[losers[parent]])) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp2</span> <span class="hljs-operator">=</span> temp;<br>                temp = losers[parent];<br>                losers[parent] = temp2;<br>            &#125;<br>            parent /= <span class="hljs-number">2</span>;<br>        &#125;<br>        losers[<span class="hljs-number">0</span>] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h2><p>k为2 用时为969毫秒</p><p>k为8 用时为306毫秒</p><p>果然k越大，运行越快。</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>中间一度想要在循环中去动态创建变量，比如命名为 <code>a_0</code>、<code>a_1</code>、<code>a_2</code> 这样形式。但是java不能这样去做，Java 是一种静态类型语言，变量名需要在编译时确定，无法在运行时动态生成。</p><p>好在我这里提前知道循环的次数，最后将变量创建在了数组中。</p><p>reader.readLine() 每次读取一行数据，我先用这个方法取了数据，紧接着又调用这个方法判断是否还有数据，结果导致最后的结果只有一半的数据，还以为是K路合并的代码有问题，排查了好久。。。（因为第一步部分排序的时候只用了一次readLine()方法，k路合并时读数据用了两次）</p><p>反思：其实数据正好少了一半，应该想到是取数据的问题。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>贴一下全部代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoserTree</span> &#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-type">int</span>[] losers;<br>    <span class="hljs-type">int</span>[] keys;<br><br>    <span class="hljs-comment">// 初始化 K 路败者树</span><br>    LoserTree(<span class="hljs-type">int</span> K) &#123;<br>        k = K;<br>        losers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            losers[i] = -<span class="hljs-number">1</span>;<br>        &#125;<br>        keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            keys[i] = Integer.MAX_VALUE;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(Integer[] initialKeys)</span> &#123;<br>        <span class="hljs-comment">// 设置初始键值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            keys[i] = initialKeys[i];<br>        &#125;<br><br>        <span class="hljs-comment">// 构建初始的败者树</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            adjust(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前的胜者索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">winner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> losers[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 更新败者树中指定索引的值</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> newKey)</span> &#123;<br>        keys[index] = newKey;<br>        adjust(index);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取指定索引的键值</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getKey</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> keys[index];<br>    &#125;<br><br>    <span class="hljs-comment">// 调整败者树，将指定索引 s 的元素插入到正确的位置</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjust</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> &#123;<br>        <span class="hljs-comment">//找到s对应的父结点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (s + k) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> s;<br>        <span class="hljs-keyword">while</span> (parent &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (temp != -<span class="hljs-number">1</span> &amp;&amp; (losers[parent] == -<span class="hljs-number">1</span> || keys[temp] &gt; keys[losers[parent]])) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp2</span> <span class="hljs-operator">=</span> temp;<br>                temp = losers[parent];<br>                losers[parent] = temp2;<br>            &#125;<br>            parent /= <span class="hljs-number">2</span>;<br>        &#125;<br>        losers[<span class="hljs-number">0</span>] = temp;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; tempFiles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 存储临时文件名</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateData</span><span class="hljs-params">(String filename)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filename);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numIntegers</span> <span class="hljs-operator">=</span> <span class="hljs-number">50000</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 检查文件是否已经存在，如果不存在则创建</span><br>            <span class="hljs-keyword">if</span> (file.createNewFile()) &#123;<br>                <span class="hljs-comment">// 向文件中写入一些内容</span><br>                <span class="hljs-keyword">try</span> (<span class="hljs-type">FileWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file)) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numIntegers; i++) &#123;<br>                        <span class="hljs-comment">// 生成 0 到 99999 之间的随机整数</span><br>                        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">100000</span>);<br>                        writer.write(randomNumber + <span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;文件已存在: &quot;</span> + file.getAbsolutePath());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;创建文件时出现错误: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readAndSortChunk</span><span class="hljs-params">(String filename, <span class="hljs-type">int</span> chunkSize)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filename))) &#123;<br>            <span class="hljs-type">int</span>[] chunk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[chunkSize];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">chunkIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            String line;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> Integer.parseInt(line);<br>                    chunk[index] = number;<br>                    index++;<br>                    <span class="hljs-keyword">if</span> (index == chunkSize) &#123;<br>                        <span class="hljs-comment">// 处理当前块</span><br>                        sortAndWriteToTempFile(chunk, chunkIndex++);<br>                        <span class="hljs-comment">// 重置索引，准备下一次读取</span><br>                        index = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                    System.err.println(<span class="hljs-string">&quot;文件中包含非数字内容: &quot;</span> + line);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 处理最后一个不完整的块（如果有）</span><br>            <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span>[] lastchunk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[index];<br>                System.arraycopy(chunk, <span class="hljs-number">0</span>, lastchunk, <span class="hljs-number">0</span>, index);<br>                sortAndWriteToTempFile(lastchunk, chunkIndex);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;读取文件时出错: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 排序并写入临时文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortAndWriteToTempFile</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> chunkIndex)</span> &#123;<br>        quickSort(array, <span class="hljs-number">0</span>, array.length - <span class="hljs-number">1</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tempFileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\temp_&quot;</span> + ++chunkIndex + <span class="hljs-string">&quot;.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(tempFileName);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 检查文件是否已经存在，如果不存在则创建</span><br>            <span class="hljs-keyword">if</span> (file.createNewFile()) &#123;<br>                <span class="hljs-comment">// 向文件中写入一些内容</span><br>                <span class="hljs-keyword">try</span> (<span class="hljs-type">FileWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file)) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>                        writer.write(array[i] + <span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125;<br>                &#125;<br>                tempFiles.add(tempFileName);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;文件已存在: &quot;</span> + file.getAbsolutePath());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;创建文件时出现错误: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br>        <span class="hljs-keyword">if</span>(low &lt; high) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> partition(array, low, high);<br>            quickSort(array, low, position - <span class="hljs-number">1</span>);<br>            quickSort(array, position+<span class="hljs-number">1</span>, high);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array,<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> array[high];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pointer</span> <span class="hljs-operator">=</span> low;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> low;i&lt;high;i++) &#123;<br>            <span class="hljs-keyword">if</span>(array[i]&lt;=pivot)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[i];<br>                array[i] = array[pointer];<br>                array[pointer] = temp;<br>                pointer++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[pointer];<br>        array[pointer] = array[high];<br>        array[high] = temp;<br>        <span class="hljs-keyword">return</span> pointer;<br>    &#125;<br><br>    <span class="hljs-comment">// k路归并文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeFiles</span><span class="hljs-params">(List&lt;String&gt; filesToMerge, String outputTempFile)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> filesToMerge.size();<br>        Integer[] values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[k];<br>        BufferedReader[] reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>[k];<br>        <span class="hljs-comment">// 初始化每个输入文件的首个值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; filesToMerge.size(); i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> filesToMerge.get(i);<br>            <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(filePath);<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader[i] = Files.newBufferedReader(path);<br>                String line;<br>                <span class="hljs-keyword">if</span> ((line = reader[i].readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                    values[i] = Integer.valueOf(line);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outputTempFile);<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            writer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;创建文件时出现错误: &quot;</span> + e.getMessage());<br>        &#125;<br><br>        <span class="hljs-comment">// 初始化败者树</span><br>        <span class="hljs-type">LoserTree</span> <span class="hljs-variable">lt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoserTree</span>(k);<br>        lt.initialize(values);<br>        <span class="hljs-comment">// 开始归并</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            count++;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">winnerIndex</span> <span class="hljs-operator">=</span> lt.winner();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">winnerValue</span> <span class="hljs-operator">=</span> lt.getKey(winnerIndex);<br>            <span class="hljs-keyword">if</span> (winnerValue == Integer.MAX_VALUE) &#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 所有文件已经归并完成</span><br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                writer.write(winnerValue + <span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> reader[winnerIndex].readLine();<br>                <span class="hljs-keyword">if</span> (line != <span class="hljs-literal">null</span>) &#123;<br>                    values[winnerIndex] = Integer.valueOf(line);<br>                    lt.update(winnerIndex, values[winnerIndex]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    lt.update(winnerIndex, Integer.MAX_VALUE);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;countcount&quot;</span> + count);<br><br>        <span class="hljs-comment">// 关闭输入流</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; filesToMerge.size(); i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                reader[i].close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 合并完成后删除原始文件</span><br>        <span class="hljs-keyword">for</span> (String filedelete : filesToMerge) &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">filed</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filedelete);<br>            filed.delete();<br>        &#125;<br>        <span class="hljs-comment">// 关闭写入</span><br>        <span class="hljs-keyword">if</span> (writer != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                writer.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">externalSort</span><span class="hljs-params">(String filename, String outputFile, <span class="hljs-type">int</span> chunkSize, <span class="hljs-type">int</span> k)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;STEP 1 开始&quot;</span>);<br>        <span class="hljs-comment">// Step 1: 分块读取并排序</span><br>        readAndSortChunk(filename, chunkSize);<br>        System.out.println(<span class="hljs-string">&quot;STEP 1 完成&quot;</span>);<br><br>        <span class="hljs-comment">// Step 2: k路归并多个有序文件，使用败者树</span><br>        System.out.println(<span class="hljs-string">&quot;STEP 2 开始&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">chunkIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (tempFiles.size() &gt; <span class="hljs-number">1</span>) &#123;<br>            List&lt;String&gt; newTempFiles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tempFiles.size(); i += k) &#123;<br>                List&lt;String&gt; filesToMerge = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; k &amp;&amp; i + j &lt; tempFiles.size(); j++) &#123;<br>                    filesToMerge.add(tempFiles.get(i + j));<br>                &#125;<br>                <span class="hljs-keyword">if</span> (filesToMerge.isEmpty()) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">if</span> (filesToMerge.size() &gt; <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">outputTempFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\temp_merge_&quot;</span> + ++chunkIndex + <span class="hljs-string">&quot;.txt&quot;</span>;<br>                    mergeFiles(filesToMerge, outputTempFile);<br>                    newTempFiles.add(outputTempFile);<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 剩余文件数少于1，直接加入</span><br>                    newTempFiles.add(filesToMerge.get(<span class="hljs-number">0</span>));<br>                &#125;<br>            &#125;<br>            tempFiles = newTempFiles;<br>            System.out.println(<span class="hljs-string">&quot;tempFiles:&quot;</span> + tempFiles);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;STEP 2 完成&quot;</span>);<br><br>        <span class="hljs-comment">// 最后的文件即为排序结果，重命名为输出文件</span><br>        <span class="hljs-keyword">if</span> (!tempFiles.isEmpty()) &#123;<br>            <span class="hljs-comment">// 定义原文件对象</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">originalFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(tempFiles.get(<span class="hljs-number">0</span>));<br>            <span class="hljs-comment">// 定义重命名后的文件对象</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">renamedFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outputFile);<br>            <span class="hljs-comment">// 尝试重命名文件</span><br>            <span class="hljs-keyword">if</span> (originalFile.renameTo(renamedFile)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;文件重命名成功，新文件路径为: &quot;</span> + renamedFile.getAbsolutePath());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.err.println(<span class="hljs-string">&quot;文件重命名失败，请检查文件是否存在或是否有足够的权限。&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\data.txt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">outputFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\out13.txt&quot;</span>;<br>        generateData(filename);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">chunkSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;    <span class="hljs-comment">// 块大小</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;              <span class="hljs-comment">// k 路归并</span><br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        externalSort(filename, outputFile, chunkSize, k);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">// 计算程序执行用时（毫秒）</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">executionTime</span> <span class="hljs-operator">=</span> endTime - startTime;<br>        System.out.println(<span class="hljs-string">&quot;k为&quot;</span> + k + <span class="hljs-string">&quot; 用时为&quot;</span> + executionTime + <span class="hljs-string">&quot;毫秒&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap源码分析</title>
    <link href="/2025/01/25/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2025/01/25/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>HashMap的实现原理、扩容机制在jdk1.7以前和jdk1.8以后有着很大的区别，由于我的电脑上的版本是jdk21，所以以下近针对jdk1.8以后。</p><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br>    <span class="hljs-keyword">final</span> K key;<br>    V value;<br>    Node&lt;K,V&gt; next;<br><br>    Node(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.hash = hash;<br>        <span class="hljs-built_in">this</span>.key = key;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<br></code></pre></td></tr></table></figure><p>在jdk1.8中，hashmap是由<strong>数组+链表&#x2F;红黑树</strong>构成的。数组中每个位置存放的都是链表或者红黑树。图解如下：</p><img src="/2025/01/25/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/4243d758576a4191867b557a03044c4f.png" class="" title="HashMap的底层"><h2 id="一些重要参数"><a href="#一些重要参数" class="headerlink" title="一些重要参数"></a>一些重要参数</h2><p><strong>默认初始化大小</strong>：16，这个是指桶的数量，一般都是2的次幂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br></code></pre></td></tr></table></figure><p><strong>负载因子</strong>：0.75</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 0.75">static final float DEFAULT_LOAD_FACTOR = 0.75f;<br></code></pre></td></tr></table></figure><p><strong>桶的树化阈值</strong>：8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br></code></pre></td></tr></table></figure><p><strong>桶的链表还原阈值</strong>：6</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UNTREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure><p><strong>最小树形化容量阈值</strong>：64</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_TREEIFY_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">64</span>;<br></code></pre></td></tr></table></figure><p><strong>扩容阈值Threshold</strong>：</p><p>初始化Threshold的方法tableSizeFor()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br>    <span class="hljs-comment">// 得到比capacity大的最小的2的幂次方数-1的数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span> &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>会得到一个大于等于传入的capacity的最小2次幂。</p><p><strong>tips：在初始化的时候，阈值是等于容量的；当放入第一个元素后，重新计算阈值，新的阈值&#x3D;容量X负载因子。</strong></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>当HashMap创建完成之后，并没有初始化table数组，而是在<strong>第一次存放元素的时候才会通过resize方法执行初始化</strong>操作。</p><p>一般不会修改负载因子，这里只说initialCapacity。</p><p>有两种情况：</p><ol><li><p>第一种：无参构造。</p><img src="/2025/01/25/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20250125161817433.png" class="" title="image-20250125161817433"><p>不指定capacity大小时，默认初始化大小为16。</p></li><li><p>第二种：指定初始容量的有参构造。</p><img src="/2025/01/25/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20250125161801735.png" class="" title="image-20250125161801735"><p>这里有点复杂，简单来说就是找到一个大于等于10的2的次幂进行初始化。</p><p>详细来讲，首先是将capacity赋值为10，计算threshold为16。然后在resize里面oldCap是计算len的，第一次的话必然是0，oldThr的值是直接从threshold赋值的，这里是16。接下来会依次进入下面框起来的两个if语句里，在这里面把oldThr赋值给了newCap，其实就是将我们开始计算的threshold作为了新的capacity，然后根据capacity*loadFactor计算新的threshold。</p><img src="/2025/01/25/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20250125165320667.png" class="" title="image-20250125165320667"></li></ol><h2 id="扩容-迁移"><a href="#扩容-迁移" class="headerlink" title="扩容 &amp; 迁移"></a>扩容 &amp; 迁移</h2><ol><li><p>根据新的容量新建一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br></code></pre></td></tr></table></figure></li><li><p>迁移：</p><p>从数组的第一个元素开始向后遍历，根据元素的类型是链表还是红黑树来分情况处理：</p><ol><li>元素既非链表也非红黑树，直接计算新的位置赋值</li><li>元素为单链表，遍历单链表，通过<strong>hash &amp; oldCap</strong>结果是否0拆分为两个链表，为0时下标仍然为index，结果为1时下标为index + oldCap。</li><li>元素为红黑树，遍历红黑树通过hash &amp; oldCap结果是否0拆分为两条单链表，如果拆分后的链表长度仍满足红黑树要求，则重建红黑树，如不满足，将TreeNode替换为Node，还原成单链表。</li></ol></li></ol><h2 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h2><ol><li><p>计算hash值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>判断table是否初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>    n = (tab = resize()).length;<br></code></pre></td></tr></table></figure></li><li><p>计算元素位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash])<br></code></pre></td></tr></table></figure></li><li><p>目标位置没有元素存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>    tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>直接将key、value封装成Node对象之后存放在目标位置。</p></li><li><p>目标位置有元素存在：需要找到具体的位置（要么key已经存在，找到那个node；要么key不存在，找到要插入的位置）</p><p>case1：目标位置第一个元素的key值就是当前要push的key值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>    e = p;<br></code></pre></td></tr></table></figure><p>case2：不满足case 1，且目标位置是红黑树结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>    e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br></code></pre></td></tr></table></figure><p>从树中逐级查找是否存在节点满足 “&#x3D;&#x3D;“ 或 “equals”，如果存在，则将值替换，如果不存在则在原来的树中新增node。</p><p>case3：不满足case 1，且目标位置是链表结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>    <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>        p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>            treeifyBin(tab, hash);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            <span class="hljs-keyword">break</span>;<br>        p = e;<br>&#125;<br></code></pre></td></tr></table></figure><p>则从链表头向后查找满足 “&#x3D;&#x3D;” 或 “equals” 的元素替换其value，如果找不到则新增节点到链表尾端。此时如果表长度到达<strong>桶的树化阈值</strong>，则将链表以hash值大小为基准构建红黑树。</p><p><strong>tips：</strong></p><p>如果table的长度还没有达到<strong>最小树形化容量阈值</strong>，则优先考虑扩容。</p></li><li><p>一些善后工作</p><p>新增操作会在返回前递增modCount和size并检查扩容阈值threshold，如果size超过了threshold，需要扩容，调resize方法，将容量翻倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">++modCount;<br><span class="hljs-keyword">if</span> (++size &gt; threshold)  resize();<br></code></pre></td></tr></table></figure></li></ol><h2 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h2><p>get操作不像push和remove会涉及到元素增多或者减少，所以没有什么特别的。先计算hash值查找桶，遍历桶对比是否有此key，有的话返回对应的value，没有则返回null。</p><h2 id="remove操作"><a href="#remove操作" class="headerlink" title="remove操作"></a>remove操作</h2><p>计算hash值，查找元素，进行删除</p><p><strong>tips</strong>：如果是在红黑树中进行删除的，则需要检查是否要转链表。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
